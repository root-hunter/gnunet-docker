name: Build GNUnet multi-arch and create .deb

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
        arch: [amd64, arm64]
        exclude:
          - os: ubuntu-latest
            arch: arm64
    env:
      VERSION: ${{ github.event.release.tag_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GNUnet repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build GNUnet ${{ env.VERSION }} for ${{ matrix.arch }}/${{ matrix.os }}
        run: |
          docker buildx build \
            --platform linux/${{ matrix.arch }} \
            --file builders/Dockerfile.${{ matrix.os }} \
            --output type=local,dest=out/${{ matrix.arch }} \
            .
      - name: Upload .deb package for ${{ matrix.arch }}/${{ matrix.os }}
        uses: actions/upload-artifact@v4
        with:
          name: gnunet-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}
          path: out/${{ matrix.arch }}/gnunet.deb

  release:
    needs: build
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.event.release.tag_name }}
    if: github.event_name == 'release'
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./out

      - name: Upload amd64 .deb to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./out/gnunet-${{ env.VERSION }}-ubuntu-latest-amd64/gnunet.deb
          asset_name: gnunet-${{ env.VERSION }}-amd64.deb
          asset_content_type: application/vnd.debian.binary-package
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
